---
format:
  html:
    page-layout: full
    theme: cosmo
    fontsize: 0.7em
    max-width: 2000px
    grid:
        body-width: 3000px
        margin-width: 0px
        sidebar-width: 0px
---

```{r setup, include=FALSE}
set.seed(1102)
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::current_input()
# options(reactable.static = TRUE)
```

```{r, include=FALSE}
library(dplyr)
library(stringr)
suppressWarnings(library(reactable))
library(htmltools)
# library(googlesheets4)

# link <- "https://docs.google.com/spreadsheets/d/11CNiOzZGwKie1G2miQY6TVMVMfI-COmiF4x2ylqetzA/edit#gid=0"
# raw <- googlesheets4::read_sheet(link)
# write.csv(raw, "../data/raw.csv")
```

```{r, include=FALSE}
raw <- read.csv(
  "data/raw.csv",
  check.names=FALSE,
  fileEncoding="UTF-8")
drop_cols <- c(
    "multi-task learning",
    "NN architecture",
    "code availability",
    "active learning",
    "semi-supervised learning",
    "PASS",
    "comments"
)

data = raw %>%
    mutate(
        `model class` = case_when(
            # str_detect(raw[["model class"]], "Cox") ~ "Cox-based",
            # str_detect(raw[["model class"]], "discrete") ~ "discrete-time",
            # str_detect(raw[["model class"]], "PEM") ~ "PEM-based",
            `model class` == "Cox-based" ~ "Cox-based",
            `model class` == "discrete-time" ~ "discrete-time",
            `model class` == "PEM-based" ~ "PEM-based",
            str_detect(raw[["model class"]], "parametric") ~ "parametric",
            TRUE ~ "other"
        ) %>% factor(levels = c("Cox-based", "discrete-time", "parametric", "PEM-based", "other")),
        architecture = case_when(
            str_detect(raw[["NN architecture"]], "CNN") ~ "CNN",
            str_detect(raw[["NN architecture"]], "RNN") ~ "RNN",
            str_detect(raw[["NN architecture"]], "AE") ~ "AE/VAE",
            str_detect(raw[["NN architecture"]], "transformer") ~ "transformer",
            str_detect(raw[["NN architecture"]], "ODE") ~ "nODE",
            str_detect(raw[["NN architecture"]], "flexible") ~ "flexible",
            str_detect(raw[["NN architecture"]], "framework") ~ "framework",
            raw[["NN architecture"]] == "FFNN" ~ "only FFNN",
            TRUE ~ "other"
        ) %>% factor(levels = c("only FFNN", "CNN", "RNN", "AE/VAE", "transformer", "nODE", "flexible", "framework", "other"))
    ) %>%
    filter(PASS == "PASS") %>%
    select(-one_of(drop_cols)) %>%
    relocate(architecture, .before = 8) %>%
    rename(
        # "left-trun-cation" = "left-truncation",
        "paramet-rization" = "parametrization",
        "archi-tecture" = "architecture",
        "high dimen-sionality" = "high dimensionality",
        "multi-modality" = "multimodality",
        "interpret-ability" = "interpretability"
    )

papers <- data %>%
    pull(paper)

data <- data %>%
    select(-paper)

hide <- c('authors', 'year', 'multiple losses', 'type of interpretability', 'code availability', 'code repository', 'datasets (non-private)', 'simulation')
```

# Overview Table of DL-based Survival Methods

```{r, echo=FALSE}
htmltools::browsable(
    tagList(
        tags$button(
            "Show/hide more columns",
            onclick = paste0(
                "Reactable.setHiddenColumns('table', prevColumns => { return prevColumns.length === 0 ? [",
                paste0("'", paste(hide, collapse = "', '"), "'"),
                "] : [] })"
            )
        ),
        tags$button(
            tagList(fontawesome::fa("download"), "Download as CSV"),
            onclick = "Reactable.downloadDataCSV('table', 'table.csv', {sep: ';'})"
        ),
        reactable(
            data,
            elementId = "table",
            rownames = FALSE,
            wrap = TRUE,
            sortable = TRUE,
            filterable = TRUE,
            searchable = TRUE,
            # resizable = TRUE,
            bordered = TRUE,
            borderless = FALSE,
            compact = TRUE,
            striped = TRUE,
            height = 700, # required for sticky column names
            fullWidth = TRUE,
            width = "auto",
            showSortIcon = TRUE,
            showSortable = FALSE,
            # minRows = 10,
            # pagination = FALSE,
            showPageSizeOptions = TRUE,
            pageSizeOptions = c(5, 7, 10, nrow(data)),
            defaultPageSize = 5,
            highlight = TRUE,
            # selection = "multiple",
            details = function(index) {
                urls <- strsplit(data[index, "code"], "; ")[[1]]
                if(length(urls) == 2) {
                    htmltools::div(
                        "further implementations of ",
                        data[index, "model name"],
                        ": ",
                        htmltools::tags$a(href = urls[2], target = "_blank", urls[2]),
                    )
                } else if(length(urls) == 3) {
                    htmltools::div(
                        "further implementations of ",
                        data[index, "model name"],
                        ": ",
                        htmltools::tags$a(href = urls[2], target = "_blank", urls[2]),
                        ", ",
                        htmltools::tags$a(href = urls[3], target = "_blank", urls[3]),
                    )
                } else if(length(urls) == 4) {
                    htmltools::div(
                        "further implementations of ",
                        data[index, "model name"],
                        ": ",
                        htmltools::tags$a(href = urls[2], target = "_blank", urls[2]),
                        ", ",
                        htmltools::tags$a(href = urls[3], target = "_blank", urls[3]),
                        ", ",
                        htmltools::tags$a(href = urls[4], target = "_blank", urls[4]),
                    )
                } else if(length(urls) == 5) {
                    htmltools::div(
                        "further implementations of ",
                        data[index, "model name"],
                        ": ",
                        htmltools::tags$a(href = urls[2], target = "_blank", urls[2]),
                        ", ",
                        htmltools::tags$a(href = urls[3], target = "_blank", urls[3]),
                        ", ",
                        htmltools::tags$a(href = urls[4], target = "_blank", urls[4]),
                        ", ",
                        htmltools::tags$a(href = urls[5], target = "_blank", urls[5]),
                    )
                } else if(length(urls) == 6) {
                    htmltools::div(
                        "further implementations of ",
                        data[index, "model name"],
                        ": ",
                        htmltools::tags$a(href = urls[2], target = "_blank", urls[2]),
                        ", ",
                        htmltools::tags$a(href = urls[3], target = "_blank", urls[3]),
                        ", ",
                        htmltools::tags$a(href = urls[4], target = "_blank", urls[4]),
                        ", ",
                        htmltools::tags$a(href = urls[5], target = "_blank", urls[5]),
                        ", ",
                        htmltools::tags$a(href = urls[6], target = "_blank", urls[6]),
                    )
                } else if(length(urls) > 6) {
                    htmltools::div(
                        "further implementations of ",
                        data[index, "model name"],
                        ": ",
                        htmltools::tags$a(href = urls[2], target = "_blank", urls[2]),
                        ", ",
                        htmltools::tags$a(href = urls[3], target = "_blank", urls[3]),
                        ", ",
                        htmltools::tags$a(href = urls[4], target = "_blank", urls[4]),
                        ", ",
                        htmltools::tags$a(href = urls[5], target = "_blank", urls[5]),
                        ", ",
                        htmltools::tags$a(href = urls[6], target = "_blank", urls[6]),
                        "... (see raw data for further implementations)"
                    )
                }
            },
            columns = list(
                title = colDef(
                    cell = function(value, index) {
                        # url <- data[index, "paper"]
                        url <- papers[index]
                        htmltools::tags$a(href = url, target = "_blank", value)
                    },
                    show = TRUE,
                    sticky = "left",
                    headerStyle = list(position = "sticky", left = 0, background = "#fff", zIndex = 1)),
                authors = colDef(show = FALSE),
                year = colDef(width = 49, show = FALSE),
                # `model name` = colDef(sticky = "left"),
                `model class` = colDef(
                    cell = function(value) {if(value == "parametric") "para-metric" else value},
                    width = 60
                ),
                `paramet-rization` = colDef(width = 70, show = TRUE),
                # `multi-task learning` = colDef(show = FALSE),
                `multiple losses` = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f Yes" else value},
                    width = 60,
                    show = FALSE
                ),
                `archi-tecture` = colDef(width = 60),
                `left-truncation` = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 69
                ),
                `interval-censoring` = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 65
                ),
                CR = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 49
                ),
                MSM = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 49
                ),
                `recurrent events` = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 64
                ),
                TVF = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 49
                ),
                TVE = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 49
                ),
                `high dimen-sionality` = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 80
                ),
                `multi-modality` = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 61
                ),
                `interpret-ability` = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 64
                ),
                # `type of interpretability` = colDef(
                #     # render as an X mark or check mark
                #     cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                #     show = FALSE
                # ),
                # `code availability` = colDef(
                #     # render as an X mark or check mark
                #     cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                #     show = FALSE
                # ),
                `code` = colDef(
                    # render as link
                    cell = function(value) {
                        if(value == "no"){
                            "\u274c No"
                        } else {
                            urls <- strsplit(value, ", ")[[1]]
                            url <- urls[1]
                            link <- sub("https://", "", url)
                            if(startsWith(link, "github")){
                                label <- "GitHub repo"
                            } else if(grepl("github\\.io", link)){
                                label <- "GitHub Pages site"
                            } else {
                                label <- link
                            }
                            htmltools::tags$a(href = url, target = "_blank", label)
                        }
                    },
                    width = 80
                ),
                `datasets (non-private)` = colDef(show = FALSE),
                simulation = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else "\u2714\ufe0f yes"},
                    show = FALSE
                )
            )
        )
    )
)
```